/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type LectureFrequencyPricing = {
  _type: 'lectureFrequencyPricing';
  title?: string;
  lectureFrequency?: number;
  price?: number;
};

export type YearMonthRange = {
  _type: 'yearMonthRange';
  yearMonthFrom?: {
    year?: string;
    month?: string;
  };
  yearMonthTo?: {
    year?: string;
    month?: string;
  };
};

export type AvailableIconType = string;

export type FaqObjectType = {
  _type: 'faqObjectType';
  title?: string;
  icon?: AvailableIconType;
  text?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
        _key: string;
      }
  >;
};

export type Rating = number;

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
      listItem?: 'bullet';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
      _key: string;
    }
>;

export type PreliminaryCourse = {
  _id: string;
  _type: 'preliminaryCourse';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  dayId?: 1 | 2 | 3 | 4 | 5;
  slug?: Slug;
  activeDate?: {
    activeDateFrom?: string;
    activeDateTo?: string;
  };
  age?: AgeCategory;
  timeFrom?:
    | '15:00'
    | '15:15'
    | '15:30'
    | '15:45'
    | '16:00'
    | '16:15'
    | '16:30'
    | '16:45'
    | '17:00'
    | '17:15'
    | '17:30'
    | '17:45'
    | '18:00';
  timeTo?:
    | '15:45'
    | '16:00'
    | '16:15'
    | '16:30'
    | '16:45'
    | '17:00'
    | '17:15'
    | '17:30'
    | '17:45'
    | '18:00'
    | '18:15'
    | '18:30'
    | '18:45'
    | '19:00';
  isFull?: boolean;
  price?: Price;
  discount?: number;
  swimmingPool?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'swimmingPool';
  };
  categoryId?:
    | 'basic'
    | 'advanced'
    | 'condition'
    | 'adult'
    | 'kindergarten'
    | 'school';
};

export type SwimmingPoolDetail = {
  _id: string;
  _type: 'swimmingPoolDetail';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  skillRequirement?: Array<string>;
  announcements?: Array<{
    title?: string;
    visible?: boolean;
    text?: BlockContent;
    _key: string;
  }>;
  sampleTraining?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.fileAsset';
    };
    _type: 'file';
  };
  fileUploads?: Array<{
    title?: string;
    file?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.fileAsset';
      };
      _type: 'file';
    };
    _key: string;
  }>;
  faq?: Array<{
    columnTitle?: string;
    questions?: Array<
      {
        _key: string;
      } & FaqObjectType
    >;
    _key: string;
  }>;
  swimmingPool?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'swimmingPool';
  };
  categoryId?:
    | 'basic'
    | 'advanced'
    | 'condition'
    | 'adult'
    | 'kindergarten'
    | 'school';
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type InfoBar = {
  _id: string;
  _type: 'infoBar';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  text?: string;
  visibility?: boolean;
  swimmingPool?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'swimmingPool';
  };
};

export type Blog = {
  _id: string;
  _type: 'blog';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  shortDescription?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'imageAlt';
  };
  video?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.fileAsset';
    };
    _type: 'file';
  };
  description?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'h2' | 'h3' | 'normal';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'imageAlt';
        _key: string;
      }
  >;
  createdAt?: string;
  author?: string;
  readTime?: number;
  tags?: Array<'equipment' | 'training' | 'tips' | 'funFact'>;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type KidsCourse = {
  _id: string;
  _type: 'kidsCourse';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  dayId?: 1 | 2 | 3 | 4 | 5;
  age?: AgeCategory;
  timeFrom?:
    | '15:00'
    | '15:15'
    | '15:30'
    | '15:45'
    | '16:00'
    | '16:15'
    | '16:30'
    | '16:45'
    | '17:00'
    | '17:15'
    | '17:30'
    | '17:45'
    | '18:00';
  timeTo?:
    | '15:45'
    | '16:00'
    | '16:15'
    | '16:30'
    | '16:45'
    | '17:00'
    | '17:15'
    | '17:30'
    | '17:45'
    | '18:00'
    | '18:15'
    | '18:30'
    | '18:45'
    | '19:00';
  isFull?: boolean;
  price?: Price;
  discount?: number;
  swimmingPool?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'swimmingPool';
  };
  categoryId?:
    | 'basic'
    | 'advanced'
    | 'condition'
    | 'adult'
    | 'kindergarten'
    | 'school';
};

export type Price = {
  _type: 'price';
  priceSemester?: number;
  priceYear?: number;
};

export type AgeCategory = {
  _type: 'ageCategory';
  ageFrom?: number;
  ageTo?: number;
};

export type Navigation = {
  _id: string;
  _type: 'navigation';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
};

export type Colors = {
  _id: string;
  _type: 'colors';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
};

export type SiteSettings = {
  _id: string;
  _type: 'siteSettings';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
};

export type Camp = {
  _id: string;
  _type: 'camp';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'imageAlt';
  };
  tag?: Array<string>;
  url?: string;
};

export type SwimmingPool = {
  _id: string;
  _type: 'swimmingPool';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  url?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'imageAlt';
  };
  privateSwimmingPool?: boolean;
  totalLength?: number;
  depth?: number;
  temperature?: number;
  isSchoolOrKindergartenAvailable?: boolean;
  location?: Geopoint;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type ImageAlt = {
  _type: 'imageAlt';
  asset?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
};

export type MediaTag = {
  _id: string;
  _type: 'media.tag';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../../websites/kometa-web/src/pages/blog/[blogId].tsx
// Variable: queryBlog
// Query: *[_type == "blog"]{"slug": slug.current}
export type QueryBlogResult = Array<{
  slug: string | null;
}>;
// Source: ../../websites/kometa-web/src/libs/sanity/api/blog.ts
// Variable: queryBlogPosts
// Query: *[_type == "blog"  && _id > $lastId]{"id":_id,title,shortDescription,description,createdAt,author,readTime,"alt":image.alt,image{asset->{...,metadata}},tags,"slug":slug.current}[] [0...$pageSize] | order(createdAt desc)
export type QueryBlogPostsResult = Array<{
  id: string;
  title: string | null;
  shortDescription: string | null;
  description: Array<
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'imageAlt';
        _key: string;
      }
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'h2' | 'h3' | 'normal';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
  > | null;
  createdAt: string | null;
  author: string | null;
  readTime: number | null;
  alt: string | null;
  image: {
    asset: {
      _id: string;
      _type: 'sanity.imageAsset';
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata: SanityImageMetadata | null;
      source?: SanityAssetSourceData;
    } | null;
  } | null;
  tags: Array<'equipment' | 'funFact' | 'tips' | 'training'> | null;
  slug: string | null;
}>;
// Variable: query
// Query: *[_type == "blog" && slug.current == $blogId][0]{"id":_id,title,shortDescription, description[]{    ...,    _type == "imageAlt" => {      ...,      asset->    },  },createdAt,author,readTime,image{asset->{...,metadata},alt},tags,slug}
export type QueryResult = {
  id: string;
  title: string | null;
  shortDescription: string | null;
  description: Array<
    | {
        asset: {
          _id: string;
          _type: 'sanity.imageAsset';
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'imageAlt';
      }
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'h2' | 'h3' | 'normal';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
      }
  > | null;
  createdAt: string | null;
  author: string | null;
  readTime: number | null;
  image: {
    asset: {
      _id: string;
      _type: 'sanity.imageAsset';
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata: SanityImageMetadata | null;
      source?: SanityAssetSourceData;
    } | null;
    alt: string | null;
  } | null;
  tags: Array<'equipment' | 'funFact' | 'tips' | 'training'> | null;
  slug: Slug | null;
} | null;
// Source: ../../websites/kometa-web/src/libs/sanity/api/camp.ts
// Variable: queryCamps
// Query: *[_type == "camp"]{"id":_id,name,"alt":image.alt,image{asset->{...,metadata}},url,"tags":tag}[]
export type QueryCampsResult = Array<{
  id: string;
  name: string | null;
  alt: string | null;
  image: {
    asset: {
      _id: string;
      _type: 'sanity.imageAsset';
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata: SanityImageMetadata | null;
      source?: SanityAssetSourceData;
    } | null;
  } | null;
  url: string | null;
  tags: Array<string> | null;
}>;
// Source: ../../websites/kometa-web/src/libs/sanity/api/document.ts
// Variable: queryDocuments
// Query: *[_type == "fileUpload"  &&  swimmingPool->slug.current == $swimmingPoolId]{"id":_id,title,file{    asset->{...,metadata}  },order,    swimmingPool -> {"slug":slug.current}  }[] | order(order)
export type QueryDocumentsResult = Array<never>;
// Source: ../../websites/kometa-web/src/libs/sanity/api/lecture.ts
// Variable: queryAvailableCourses
// Query: *[_type == "kidsCourse" && _id > $lastId]{"id":_id,"priceYear":price.priceYear,"priceSemester":price.priceSemester,isFull,categoryId,dayId,timeFrom,timeTo,"ageFrom":age.ageFrom,"ageTo":age.ageTo,  ...(swimmingPool->{"name":name,"slug":slug.current,"alt":image.alt,"image":image{asset->{...,metadata}},"url":url,"privateSwimmingPool":privateSwimmingPool,"isSchoolOrKindergartenAvailable":isSchoolOrKindergartenAvailable})  }[] [0...$pageSize]
export type QueryAvailableCoursesResult = Array<{
  id: string;
  priceYear: number | null;
  priceSemester: number | null;
  isFull: boolean | null;
  categoryId:
    | 'adult'
    | 'advanced'
    | 'basic'
    | 'condition'
    | 'kindergarten'
    | 'school'
    | null;
  dayId: 1 | 2 | 3 | 4 | 5 | null;
  timeFrom:
    | '15:00'
    | '15:15'
    | '15:30'
    | '15:45'
    | '16:00'
    | '16:15'
    | '16:30'
    | '16:45'
    | '17:00'
    | '17:15'
    | '17:30'
    | '17:45'
    | '18:00'
    | null;
  timeTo:
    | '15:45'
    | '16:00'
    | '16:15'
    | '16:30'
    | '16:45'
    | '17:00'
    | '17:15'
    | '17:30'
    | '17:45'
    | '18:00'
    | '18:15'
    | '18:30'
    | '18:45'
    | '19:00'
    | null;
  ageFrom: number | null;
  ageTo: number | null;
  name: string | null;
  slug: string | null;
  alt: string | null;
  image: {
    asset: {
      _id: string;
      _type: 'sanity.imageAsset';
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata: SanityImageMetadata | null;
      source?: SanityAssetSourceData;
    } | null;
  } | null;
  url: string | null;
  privateSwimmingPool: boolean | null;
  isSchoolOrKindergartenAvailable: boolean | null;
}>;
// Variable: queryLectures
// Query: *[_type == "kidsCourse"]{"id":_id,"priceYear":price.priceYear,"priceSemester":price.priceSemester,isFull,categoryId,dayId,timeFrom,timeTo,"ageFrom":age.ageFrom,"ageTo":age.ageTo,"swimmingPoolId":swimmingPool->._id,"name":swimmingPool->.name,"alt":swimmingPool->.image.alt,"image":swimmingPool->.image{asset->{...,metadata}},"url":swimmingPool->.url,"privateSwimmingPool":swimmingPool->.privateSwimmingPool,"isSchoolOrKindergartenAvailable":swimmingPool->.isSchoolOrKindergartenAvailable}[]
export type QueryLecturesResult = Array<{
  id: string;
  priceYear: number | null;
  priceSemester: number | null;
  isFull: boolean | null;
  categoryId:
    | 'adult'
    | 'advanced'
    | 'basic'
    | 'condition'
    | 'kindergarten'
    | 'school'
    | null;
  dayId: 1 | 2 | 3 | 4 | 5 | null;
  timeFrom:
    | '15:00'
    | '15:15'
    | '15:30'
    | '15:45'
    | '16:00'
    | '16:15'
    | '16:30'
    | '16:45'
    | '17:00'
    | '17:15'
    | '17:30'
    | '17:45'
    | '18:00'
    | null;
  timeTo:
    | '15:45'
    | '16:00'
    | '16:15'
    | '16:30'
    | '16:45'
    | '17:00'
    | '17:15'
    | '17:30'
    | '17:45'
    | '18:00'
    | '18:15'
    | '18:30'
    | '18:45'
    | '19:00'
    | null;
  ageFrom: number | null;
  ageTo: number | null;
  swimmingPoolId: string | null;
  name: string | null;
  alt: string | null;
  image: {
    asset: {
      _id: string;
      _type: 'sanity.imageAsset';
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata: SanityImageMetadata | null;
      source?: SanityAssetSourceData;
    } | null;
  } | null;
  url: string | null;
  privateSwimmingPool: boolean | null;
  isSchoolOrKindergartenAvailable: boolean | null;
}>;
// Variable: queryLecturesByPoolAndCategory
// Query: *[_type == "kidsCourse" && categoryId == $categoryId &&   swimmingPool->slug.current == $swimmingPoolId  ]{"id":_id,"priceYear":price.priceYear,"priceSemester":price.priceSemester,discount,isFull,categoryId,dayId,timeFrom,timeTo,"ageFrom":age.ageFrom,"ageTo":age.ageTo,"swimmingPoolId":swimmingPool->._id,"name":swimmingPool->.name,"alt":swimmingPool->.image.alt,"image":swimmingPool->.image{asset->{...,metadata}},"url":swimmingPool->.url,"privateSwimmingPool":swimmingPool->.privateSwimmingPool,"isSchoolOrKindergartenAvailable":swimmingPool->.isSchoolOrKindergartenAvailable,categoryId}[]
export type QueryLecturesByPoolAndCategoryResult = Array<{
  id: string;
  priceYear: number | null;
  priceSemester: number | null;
  discount: number | null;
  isFull: boolean | null;
  categoryId:
    | 'adult'
    | 'advanced'
    | 'basic'
    | 'condition'
    | 'kindergarten'
    | 'school'
    | null;
  dayId: 1 | 2 | 3 | 4 | 5 | null;
  timeFrom:
    | '15:00'
    | '15:15'
    | '15:30'
    | '15:45'
    | '16:00'
    | '16:15'
    | '16:30'
    | '16:45'
    | '17:00'
    | '17:15'
    | '17:30'
    | '17:45'
    | '18:00'
    | null;
  timeTo:
    | '15:45'
    | '16:00'
    | '16:15'
    | '16:30'
    | '16:45'
    | '17:00'
    | '17:15'
    | '17:30'
    | '17:45'
    | '18:00'
    | '18:15'
    | '18:30'
    | '18:45'
    | '19:00'
    | null;
  ageFrom: number | null;
  ageTo: number | null;
  swimmingPoolId: string | null;
  name: string | null;
  alt: string | null;
  image: {
    asset: {
      _id: string;
      _type: 'sanity.imageAsset';
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata: SanityImageMetadata | null;
      source?: SanityAssetSourceData;
    } | null;
  } | null;
  url: string | null;
  privateSwimmingPool: boolean | null;
  isSchoolOrKindergartenAvailable: boolean | null;
}>;
// Source: ../../websites/kometa-web/src/libs/sanity/api/swimming-pool.ts
// Variable: querySwimmingPools
// Query: *[_type == "swimmingPool"]{"id":_id,name,"slug":slug.current,location,"alt":image.alt,image{asset->{...,metadata}},url,privateSwimmingPool,totalLength,depth,temperature}[]
export type QuerySwimmingPoolsResult = Array<{
  id: string;
  name: string | null;
  slug: string | null;
  location: Geopoint | null;
  alt: string | null;
  image: {
    asset: {
      _id: string;
      _type: 'sanity.imageAsset';
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata: SanityImageMetadata | null;
      source?: SanityAssetSourceData;
    } | null;
  } | null;
  url: string | null;
  privateSwimmingPool: boolean | null;
  totalLength: number | null;
  depth: number | null;
  temperature: number | null;
}>;
// Variable: querySwimmingPool
// Query: *[_type == "swimmingPool" && slug.current == $swimmingPoolId][0]{"id":_id,name,"slug":slug.current,location,"alt":image.alt,image{asset->{...,metadata}},url,privateSwimmingPool,totalLength,depth,temperature}
export type QuerySwimmingPoolResult = {
  id: string;
  name: string | null;
  slug: string | null;
  location: Geopoint | null;
  alt: string | null;
  image: {
    asset: {
      _id: string;
      _type: 'sanity.imageAsset';
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata: SanityImageMetadata | null;
      source?: SanityAssetSourceData;
    } | null;
  } | null;
  url: string | null;
  privateSwimmingPool: boolean | null;
  totalLength: number | null;
  depth: number | null;
  temperature: number | null;
} | null;
